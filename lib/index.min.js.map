{"version":3,"file":"index.min.js","sources":["index.js"],"names":["global","deferred","promise","undefined","resolver","rejecter","Promise","resolve","reject","adapter","store","op","key","data","defer","record","prefix","adapters","local","id","lkey","result","localStorage","getItem","JSON","parse","Error","removeItem","setItem","stringify","toArray","e","require","exports","module","define","haroLocalStorage","window"],"mappings":";;;;;;;;;;;AASA,cAEA,SAAWA,GAIV,QAASC,KACR,GAAIC,GAAUC,OACVC,EAAWD,OACXE,EAAWF,MAOf,OALAD,GAAU,GAAII,GAAQ,SAAUC,EAASC,GACxCJ,EAAWG,EACXF,EAAWG,KAGHD,QAASH,EAAUI,OAAQH,EAAUH,QAASA,GAGxD,QAASO,GAAQC,MAAOC,EAAIC,EAAKC,GAChC,GAAIC,GAAQb,IACRc,EAAiBZ,SAARS,EACTI,EAASN,MAAMO,SAASC,OAASR,MAAMS,GACvCC,EAAOJ,GAAUD,EAAS,IAAMH,EAAM,IACtCS,EAASlB,MAEb,IAAW,QAAPQ,EACHU,EAASC,EAAaC,QAAQH,GAEf,OAAXC,EACHP,EAAMP,QAAQiB,KAAKC,MAAMJ,IACfN,EACVD,EAAMN,OAAO,GAAIkB,OAAM,qCAEvBZ,EAAMP,gBAED,IAAW,WAAPI,EACVW,EAAaK,WAAWP,GACxBN,EAAMP,SAAQ,OACR,IAAW,QAAPI,EACV,IACCW,EAAaM,QAAQR,EAAMI,KAAKK,UAAUd,EAASF,EAAOH,MAAMoB,YAChEhB,EAAMP,SAAQ,GACb,MAAOwB,GACRjB,EAAMN,OAAOuB,GAIf,MAAOjB,GAAMZ,QA7Cd,GAAII,GAAUN,EAAOM,SAAW0B,QAAQ,eAAe1B,QACnDgB,EAAetB,EAAOsB,cAAgBU,QAAQ,eAgD3B,oBAAZC,SACVC,OAAOD,QAAUxB,EACW,kBAAX0B,QACjBA,OAAO,WACN,MAAO1B,KAGRT,EAAOoC,iBAAmB3B,GAEP,mBAAXT,QAAyBA,OAASqC","sourcesContent":["/**\r\n * localStorage persistent storage adapter for Har≈ç\r\n *\r\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\r\n * @copyright 2015\r\n * @license BSD-3-Clause\r\n * @link https://github.com/avoidwork/haro-localstorage\r\n * @version 1.0.6\r\n */\n\"use strict\";\n\n(function (global) {\n\tvar Promise = global.Promise || require(\"es6-promise\").Promise;\n\tvar localStorage = global.localStorage || require(\"localStorage\");\n\n\tfunction deferred() {\n\t\tvar promise = undefined,\n\t\t    resolver = undefined,\n\t\t    rejecter = undefined;\n\n\t\tpromise = new Promise(function (resolve, reject) {\n\t\t\tresolver = resolve;\n\t\t\trejecter = reject;\n\t\t});\n\n\t\treturn { resolve: resolver, reject: rejecter, promise: promise };\n\t}\n\n\tfunction adapter(store, op, key, data) {\n\t\tvar defer = deferred(),\n\t\t    record = key !== undefined,\n\t\t    prefix = store.adapters.local || store.id,\n\t\t    lkey = prefix + (record ? \"_\" + key : \"\"),\n\t\t    result = undefined;\n\n\t\tif (op === \"get\") {\n\t\t\tresult = localStorage.getItem(lkey);\n\n\t\t\tif (result !== null) {\n\t\t\t\tdefer.resolve(JSON.parse(result));\n\t\t\t} else if (record) {\n\t\t\t\tdefer.reject(new Error(\"Record not found in localStorage\"));\n\t\t\t} else {\n\t\t\t\tdefer.resolve([]);\n\t\t\t}\n\t\t} else if (op === \"remove\") {\n\t\t\tlocalStorage.removeItem(lkey);\n\t\t\tdefer.resolve(true);\n\t\t} else if (op === \"set\") {\n\t\t\ttry {\n\t\t\t\tlocalStorage.setItem(lkey, JSON.stringify(record ? data : store.toArray()));\n\t\t\t\tdefer.resolve(true);\n\t\t\t} catch (e) {\n\t\t\t\tdefer.reject(e);\n\t\t\t}\n\t\t}\n\n\t\treturn defer.promise;\n\t}\n\n\t// Node, AMD & window supported\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = adapter;\n\t} else if (typeof define === \"function\") {\n\t\tdefine(function () {\n\t\t\treturn adapter;\n\t\t});\n\t} else {\n\t\tglobal.haroLocalStorage = adapter;\n\t}\n})(typeof global !== \"undefined\" ? global : window);\n"]}