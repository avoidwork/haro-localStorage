{"version":3,"file":"index.min.js","sources":["index.js"],"names":["global","deferred","promise","undefined","resolver","rejecter","Promise","resolve","reject","local","store","op","key","data","defer","record","prefix","adapters","id","lkey","result","localStorage","getItem","JSON","parse","Error","removeItem","setItem","stringify","toArray","e","require","exports","module","define","haroLocal","window"],"mappings":";;;;;;;;;;;AASA,cAEA,SAAWA,GAIV,QAASC,KACR,GAAIC,GAAUC,OACVC,EAAWD,OACXE,EAAWF,MAOf,OALAD,GAAU,GAAII,GAAQ,SAAUC,EAASC,GACxCJ,EAAWG,EACXF,EAAWG,KAGHD,QAASH,EAAUI,OAAQH,EAAUH,QAASA,GAGxD,QAASO,GAAMC,MAAOC,EAAIC,EAAKC,GAC9B,GAAIC,GAAQb,IACRc,EAAiBZ,SAARS,EACTI,EAASN,MAAMO,SAASR,OAASC,MAAMQ,GACvCC,EAAOH,GAAUD,EAAS,IAAMH,EAAM,IACtCQ,EAASjB,MAmBb,IAjBW,QAAPQ,IACHS,EAASC,EAAaC,QAAQH,GAEf,OAAXC,EACHN,EAAMP,QAAQgB,KAAKC,MAAMJ,IACfL,EACVD,EAAMN,OAAO,GAAIiB,OAAM,qCAEvBX,EAAMP,aAIG,WAAPI,IACHU,EAAaK,WAAWP,GACxBL,EAAMP,SAAQ,IAGJ,QAAPI,EACH,IACCU,EAAaM,QAAQR,EAAMI,KAAKK,UAAUb,EAASF,EAAOH,MAAMmB,YAChEf,EAAMP,SAAQ,GACb,MAAOuB,GACRhB,EAAMN,OAAOsB,GAIf,MAAOhB,GAAMZ,QAjDd,GAAII,GAAUN,EAAOM,SAAWyB,QAAQ,eAAezB,QACnDe,EAAerB,EAAOqB,cAAgBU,QAAQ,eAoD3B,oBAAZC,SACVC,OAAOD,QAAUvB,EACW,kBAAXyB,QACjBA,OAAO,WACN,MAAOzB,KAGRT,EAAOmC,UAAY1B,GAEA,mBAAXT,QAAyBA,OAASoC","sourcesContent":["/**\n * localStorage persistent storage adapter for Har≈ç\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2015\n * @license BSD-3-Clause\n * @link https://github.com/avoidwork/haro-localstorage\n * @version 1.0.5\n */\n\"use strict\";\n\n(function (global) {\n\tvar Promise = global.Promise || require(\"es6-promise\").Promise;\n\tvar localStorage = global.localStorage || require(\"localStorage\");\n\n\tfunction deferred() {\n\t\tvar promise = undefined,\n\t\t    resolver = undefined,\n\t\t    rejecter = undefined;\n\n\t\tpromise = new Promise(function (resolve, reject) {\n\t\t\tresolver = resolve;\n\t\t\trejecter = reject;\n\t\t});\n\n\t\treturn { resolve: resolver, reject: rejecter, promise: promise };\n\t}\n\n\tfunction local(store, op, key, data) {\n\t\tvar defer = deferred(),\n\t\t    record = key !== undefined,\n\t\t    prefix = store.adapters.local || store.id,\n\t\t    lkey = prefix + (record ? \"_\" + key : \"\"),\n\t\t    result = undefined;\n\n\t\tif (op === \"get\") {\n\t\t\tresult = localStorage.getItem(lkey);\n\n\t\t\tif (result !== null) {\n\t\t\t\tdefer.resolve(JSON.parse(result));\n\t\t\t} else if (record) {\n\t\t\t\tdefer.reject(new Error(\"Record not found in localStorage\"));\n\t\t\t} else {\n\t\t\t\tdefer.resolve([]);\n\t\t\t}\n\t\t}\n\n\t\tif (op === \"remove\") {\n\t\t\tlocalStorage.removeItem(lkey);\n\t\t\tdefer.resolve(true);\n\t\t}\n\n\t\tif (op === \"set\") {\n\t\t\ttry {\n\t\t\t\tlocalStorage.setItem(lkey, JSON.stringify(record ? data : store.toArray()));\n\t\t\t\tdefer.resolve(true);\n\t\t\t} catch (e) {\n\t\t\t\tdefer.reject(e);\n\t\t\t}\n\t\t}\n\n\t\treturn defer.promise;\n\t}\n\n\t// Node, AMD & window supported\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = local;\n\t} else if (typeof define === \"function\") {\n\t\tdefine(function () {\n\t\t\treturn local;\n\t\t});\n\t} else {\n\t\tglobal.haroLocal = local;\n\t}\n})(typeof global !== \"undefined\" ? global : window);\n"]}