{"version":3,"file":"index.min.js","sources":["index.js"],"names":["global","keys","prefix","regex","RegExp","Object","localStorage","filter","i","test","adapter","store","op","key","data","defer","deferred","record","undefined","adapters","local","id","lkey","result","getItem","map","JSON","parse","resolve","reject","Error","removeItem","forEach","setItem","stringify","toArray","promise","require","exports","module","define","haroLocalStorage","window"],"mappings":";;;;;;;;;;;AASA,cAEA,SAAWA,GAIV,QAASC,GAAKC,GACb,GAAIC,OAAQ,GAAIC,QAAO,IAAMF,EAAS,IAEtC,OAAOG,QAAOJ,KAAKK,GAAcC,OAAO,SAAUC,GACjD,MAAOL,OAAMM,KAAKD,KAIpB,QAASE,GAAQC,MAAOC,EAAIC,EAAKC,GAChC,GAAIC,GAAQC,IACRC,EAAiBC,SAARL,EACTX,EAASS,MAAMQ,SAASC,OAAST,MAAMU,GACvCC,EAAOpB,EAAS,IAAMW,EACtBU,EAASL,MAwCb,OAtCW,QAAPN,GAEFW,EADGN,EACMX,EAAakB,QAAQF,GAErBrB,EAAKC,GAAQuB,IAAI,SAAUjB,GACnC,MAAOkB,MAAKC,MAAMrB,EAAakB,QAAQhB,MAI1B,OAAXe,EACHR,EAAMa,QAA0B,gBAAXL,GAAsBG,KAAKC,MAAMJ,GAAUA,GACtDN,EACVF,EAAMc,OAAO,GAAIC,OAAM,qCAEvBf,EAAMa,aAEU,WAAPhB,GACNK,EACHX,EAAayB,WAAWT,GAExBrB,EAAKC,GAAQ8B,QAAQ,SAAUxB,GAC9BF,EAAayB,WAAWvB,KAI1BO,EAAMa,SAAQ,IACG,QAAPhB,IACNK,EACHX,EAAa2B,QAAQX,EAAMI,KAAKQ,UAAUpB,IAE1CH,MAAMwB,UAAUH,QAAQ,SAAUxB,GACjCF,EAAa2B,QAAQ/B,EAAS,IAAMM,EAAEG,MAAME,KAAMa,KAAKQ,UAAU1B,MAInEO,EAAMa,SAAQ,IAGRb,EAAMqB,QAxDd,GAAIpB,GAAWqB,QAAQ,cACnB/B,EAAeN,EAAOM,cAAgB+B,QAAQ,eA2D3B,oBAAZC,SACVC,OAAOD,QAAU5B,EACW,kBAAX8B,QACjBA,OAAO,WACN,MAAO9B,KAGRV,EAAOyC,iBAAmB/B,GAEP,mBAAXV,QAAyBA,OAAS0C","sourcesContent":["/**\n * localStorage persistent storage adapter for Har≈ç\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2015\n * @license BSD-3-Clause\n * @link https://github.com/avoidwork/haro-localstorage\n * @version 1.1.2\n */\n\"use strict\";\n\n(function (global) {\n\tvar deferred = require(\"tiny-defer\");\n\tvar localStorage = global.localStorage || require(\"localStorage\");\n\n\tfunction keys(prefix) {\n\t\tvar regex = new RegExp(\"^\" + prefix + \"_\");\n\n\t\treturn Object.keys(localStorage).filter(function (i) {\n\t\t\treturn regex.test(i);\n\t\t});\n\t}\n\n\tfunction adapter(store, op, key, data) {\n\t\tvar defer = deferred(),\n\t\t    record = key !== undefined,\n\t\t    prefix = store.adapters.local || store.id,\n\t\t    lkey = prefix + \"_\" + key,\n\t\t    result = undefined;\n\n\t\tif (op === \"get\") {\n\t\t\tif (record) {\n\t\t\t\tresult = localStorage.getItem(lkey);\n\t\t\t} else {\n\t\t\t\tresult = keys(prefix).map(function (i) {\n\t\t\t\t\treturn JSON.parse(localStorage.getItem(i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (result !== null) {\n\t\t\t\tdefer.resolve(typeof result === \"string\" ? JSON.parse(result) : result);\n\t\t\t} else if (record) {\n\t\t\t\tdefer.reject(new Error(\"Record not found in localStorage\"));\n\t\t\t} else {\n\t\t\t\tdefer.resolve([]);\n\t\t\t}\n\t\t} else if (op === \"remove\") {\n\t\t\tif (record) {\n\t\t\t\tlocalStorage.removeItem(lkey);\n\t\t\t} else {\n\t\t\t\tkeys(prefix).forEach(function (i) {\n\t\t\t\t\tlocalStorage.removeItem(i);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdefer.resolve(true);\n\t\t} else if (op === \"set\") {\n\t\t\tif (record) {\n\t\t\t\tlocalStorage.setItem(lkey, JSON.stringify(data));\n\t\t\t} else {\n\t\t\t\tstore.toArray().forEach(function (i) {\n\t\t\t\t\tlocalStorage.setItem(prefix + \"_\" + i[store.key], JSON.stringify(i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdefer.resolve(true);\n\t\t}\n\n\t\treturn defer.promise;\n\t}\n\n\t// Node, AMD & window supported\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = adapter;\n\t} else if (typeof define === \"function\") {\n\t\tdefine(function () {\n\t\t\treturn adapter;\n\t\t});\n\t} else {\n\t\tglobal.haroLocalStorage = adapter;\n\t}\n})(typeof global !== \"undefined\" ? global : window);\n"]}